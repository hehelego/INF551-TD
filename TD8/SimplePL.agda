-- Tested on
-- agda 2.6.3
-- agda-stdlib 2.1

open import Data.Unit using (‚ä§ ; tt)
open import Data.Bool using (Bool ; true ; false)
open import Data.Product renaming (_√ó_ to _‚àß_ ; proj‚ÇÅ to fst ; proj‚ÇÇ to snd)
open import Data.Sum renaming (_‚äé_ to _‚à®_ ; inj‚ÇÅ to left ; inj‚ÇÇ to right)
open import Data.Nat renaming (‚Ñï to Nat)
open import Data.Product renaming (proj‚ÇÅ to fst ; proj‚ÇÇ to snd)
open import Relation.Binary.PropositionalEquality

data Trichotomy : Nat ‚Üí Nat ‚Üí Set where
  tri-= : {m n : Nat} ‚Üí m ‚â° n ‚Üí Trichotomy m n
  tri-< : {m n : Nat} ‚Üí m < n ‚Üí Trichotomy m n
  tri-> : {m n : Nat} ‚Üí n < m ‚Üí Trichotomy m n

trichotomy : (m n : Nat) ‚Üí Trichotomy m n
trichotomy zero zero = tri-= refl
trichotomy zero (suc n) = tri-< z<s
trichotomy (suc m) zero = tri-> z<s
trichotomy (suc m) (suc n) with trichotomy m n
... | tri-= m=n = tri-= (cong suc m=n)
... | tri-< m<n = tri-< (s<s m<n)
... | tri-> m>n = tri-> (s<s m>n)

dec< : (m n : Nat) ‚Üí m < n ‚à® n ‚â§ m
dec< zero zero = right z‚â§n
dec< zero (suc n) = left z<s
dec< (suc m) zero = right z‚â§n
dec< (suc m) (suc n) with dec< m n
... | left  m<n = left  (s<s m<n)
... | right n‚â§m = right (s‚â§s n‚â§m)

data Type : Set
data Ctx : Set
data Lookup : Ctx ‚Üí Nat ‚Üí Type ‚Üí Set
data Prog : Set
data _‚ä¢_‚à∑_ : Ctx ‚Üí Prog ‚Üí Type ‚Üí Set
data Value : Prog ‚Üí Set
data _‚Ü¶_ : Prog ‚Üí Prog ‚Üí Set

infixr 20 _‚áí_
data Type where
  ùüô : Type
  ùîπ : Type
  ‚Ñï : Type
  ‚ü™_,_‚ü´ : Type ‚Üí Type ‚Üí Type
  _‚áí_ : Type ‚Üí Type ‚Üí Type

infixl 15 _//_
data Ctx where
  ‚àÖ : Ctx
  _//_ : Ctx ‚Üí Type ‚Üí Ctx

data Lookup where
  at-head : {Œì : Ctx} {A : Type} ‚Üí Lookup (Œì // A) zero A
  in-tail : {Œì : Ctx} {n : Nat} {A B : Type} ‚Üí Lookup Œì n A ‚Üí Lookup (Œì // B) (suc n) A

infixr 10 _¬∑_
infix 10 ‚ü®_,_‚ü©
data Prog where
  -- boolean literal
  bool : Bool ‚Üí Prog
  -- natural number literal
  nat : Nat ‚Üí Prog
  -- sum of two natural numbers
  _+‚Çë_ : Prog ‚Üí Prog ‚Üí Prog
  -- test to see if the a number is less than another number
  _<‚Çë_ : Prog ‚Üí Prog ‚Üí Prog
  -- branching program
  if_then_else_ : Prog ‚Üí Prog ‚Üí Prog ‚Üí Prog
  -- pair of two expression
  ‚ü®_,_‚ü© : Prog ‚Üí Prog ‚Üí Prog
  proj0 : Prog ‚Üí Prog
  proj1 : Prog ‚Üí Prog
  -- unitary value
  unit : Prog
  -- variable, function abstraction and application
  var : Nat ‚Üí Prog
  abs : Prog ‚Üí Prog
  _¬∑_ : Prog ‚Üí Prog ‚Üí Prog

lift : Nat ‚Üí Prog ‚Üí Prog
lift n (bool x) = bool x
lift n (nat x) = nat x
lift n (p +‚Çë q) = let p' = lift n p ; q' = lift n q in p' +‚Çë q'
lift n (p <‚Çë q) = let p' = lift n p ; q' = lift n q in p' <‚Çë q'
lift n (if c then p else q) = let c' = lift n c
                                  p' = lift n p
                                  q' = lift n q
                               in if c' then p' else q'
lift n ‚ü® p , q ‚ü© = let p' = lift n p ; q' = lift n q in ‚ü® p' , q' ‚ü©
lift n (proj0 p) = let p' = lift n p in proj0 p'
lift n (proj1 p) = let p' = lift n p in proj1 p'
lift n unit = unit
lift n (var x) with dec< x n
... | left  x<n = var x
... | right n‚â§x = var (suc x)
lift n (abs p) = let p' = lift (suc n) p in abs p'
lift n (p ¬∑ q) = let p' = lift n p ; q' = lift n q in p' ¬∑ q'


subs : Prog ‚Üí Nat ‚Üí Prog ‚Üí Prog
subs (bool x) n r = bool x
subs (nat x) n r = nat x
subs (p +‚Çë q) n r = let p' = subs p n r ; q' = subs q n r in p' +‚Çë q'
subs (p <‚Çë q) n r = let p' = subs p n r ; q' = subs q n r in p' <‚Çë q'
subs (if c then p else q) n r = let c' = subs c n r
                                    p' = subs p n r
                                    q' = subs q n r
                                 in if c' then p' else q'
subs ‚ü® p , q ‚ü© n r = let p' = subs p n r ; q' = subs q n r in ‚ü® p' , q' ‚ü©
subs (proj0 p) n r = let p' = subs p n r in proj0 p'
subs (proj1 p) n r = let p' = subs p n r in proj1 p'
subs unit n r = unit
subs (var x) n r with trichotomy x n
... | tri-= x=n = r
... | tri-< x<n = var x
... | tri-> x>n = var (pred x)
subs (abs p) n r = let n' = suc n
                       r' = lift 0 r
                    in abs (subs p n' r')
subs (p ¬∑ q) n r = let p' = subs p n r ; q' = subs q n r in p' ¬∑ q'


-- TODO: this reduction relation is non-deterministic, can we show that it is confluent?
infixr 5 _‚Ü¶_
data _‚Ü¶_ where
  -- compute the result of a sum
  +-natval : {m n : Nat} ‚Üí nat m +‚Çë nat n ‚Ü¶ nat (m + n)
  -- reduce one operand of a summation
  +-left  : {p p' q : Prog} ‚Üí p ‚Ü¶ p' ‚Üí p +‚Çë q ‚Ü¶ p' +‚Çë q
  +-right : {p q q' : Prog} ‚Üí q ‚Ü¶ q' ‚Üí p +‚Çë q ‚Ü¶ p +‚Çë q'
  -- compute the result of a comparison
  <-true  : {m n : Nat} ‚Üí m < n ‚Üí nat m <‚Çë nat n ‚Ü¶ bool true
  <-false : {m n : Nat} ‚Üí n ‚â§ m ‚Üí nat m <‚Çë nat n ‚Ü¶ bool false
  -- reduce one operand of a comparison 
  <-left  : {p p' q : Prog} ‚Üí p ‚Ü¶ p' ‚Üí p <‚Çë q ‚Ü¶ p' <‚Çë q
  <-right : {p q q' : Prog} ‚Üí q ‚Ü¶ q' ‚Üí p <‚Çë q ‚Ü¶ p <‚Çë q'
  -- take one branch of a if-then-else expression
  if-true  : {p q : Prog} ‚Üí if bool true  then p else q ‚Ü¶ p
  if-false : {p q : Prog} ‚Üí if bool false then p else q ‚Ü¶ q
  -- reduce the branching condition of a if-then-else expression
  if-cond : {c c' p q : Prog} ‚Üí c ‚Ü¶ c' ‚Üí if c then p else q ‚Ü¶ if c' then p else q
  -- reduce one component of a pair
  pair-left  : {p p' q : Prog} ‚Üí p ‚Ü¶ p' ‚Üí ‚ü® p , q ‚ü© ‚Ü¶ ‚ü® p' , q ‚ü©
  pair-right : {p q q' : Prog} ‚Üí q ‚Ü¶ q' ‚Üí ‚ü® p , q ‚ü© ‚Ü¶ ‚ü® p , q' ‚ü©
  -- evaluate projection of a pair
  proj0-pair : {p p' : Prog} ‚Üí p ‚Ü¶ p' ‚Üí proj0 p ‚Ü¶ proj0 p'
  proj1-pair : {p p' : Prog} ‚Üí p ‚Ü¶ p' ‚Üí proj1 p ‚Ü¶ proj1 p'
  pair-fst : {p q : Prog} ‚Üí proj0 ‚ü® p , q ‚ü© ‚Ü¶ p
  pair-snd : {p q : Prog} ‚Üí proj1 ‚ü® p , q ‚ü© ‚Ü¶ q
  -- reduce a function call
  app-left  : {p p' q : Prog} ‚Üí p ‚Ü¶ p' ‚Üí p ¬∑ q ‚Ü¶ p' ¬∑ q
  app-right : {p q q' : Prog} ‚Üí q ‚Ü¶ q' ‚Üí p ¬∑ q ‚Ü¶ p ¬∑ q'
  app-beta : {p q : Prog} ‚Üí (abs p) ¬∑ q ‚Ü¶ (subs p 0 q)


infix 10 _‚ä¢_‚à∑_
data _‚ä¢_‚à∑_ where
  -- type of atomic values
  ‚ä¢‚Ñï : {Œì : Ctx} {n : Nat}  ‚Üí Œì ‚ä¢ nat n ‚à∑ ‚Ñï
  ‚ä¢ùîπ : {Œì : Ctx} {b : Bool} ‚Üí Œì ‚ä¢ bool b ‚à∑ ùîπ
  -- type of compositional expressions : build from types of sub-expressions
  ‚ä¢+ : {Œì : Ctx} {p q : Prog} ‚Üí Œì ‚ä¢ p ‚à∑ ‚Ñï ‚Üí Œì ‚ä¢ q ‚à∑ ‚Ñï ‚Üí Œì ‚ä¢ p +‚Çë q ‚à∑ ‚Ñï
  ‚ä¢< : {Œì : Ctx} {p q : Prog} ‚Üí Œì ‚ä¢ p ‚à∑ ‚Ñï ‚Üí Œì ‚ä¢ q ‚à∑ ‚Ñï ‚Üí Œì ‚ä¢ p <‚Çë q ‚à∑ ùîπ
  -- branching condition must be boolean and the two branches have the identical type
  ‚ä¢if : {Œì : Ctx} {c p q : Prog} {A : Type} ‚Üí Œì ‚ä¢ c ‚à∑ ùîπ ‚Üí Œì ‚ä¢ p ‚à∑ A ‚Üí Œì ‚ä¢ q ‚à∑ A ‚Üí Œì ‚ä¢ if c then p else q ‚à∑ A
  -- pair type
  ‚ä¢pair : {Œì : Ctx} {p q : Prog} {A B : Type} ‚Üí Œì ‚ä¢ p ‚à∑ A ‚Üí Œì ‚ä¢ q ‚à∑ B ‚Üí Œì ‚ä¢ ‚ü® p , q ‚ü© ‚à∑ ‚ü™ A , B ‚ü´
  ‚ä¢proj0 : {Œì : Ctx} {p : Prog} {A B : Type} ‚Üí Œì ‚ä¢ p ‚à∑ ‚ü™ A , B ‚ü´ ‚Üí Œì ‚ä¢ proj0 p ‚à∑ A
  ‚ä¢proj1 : {Œì : Ctx} {p : Prog} {A B : Type} ‚Üí Œì ‚ä¢ p ‚à∑ ‚ü™ A , B ‚ü´ ‚Üí Œì ‚ä¢ proj1 p ‚à∑ B
  -- unit type
  ‚ä¢ùüô : {Œì : Ctx} ‚Üí Œì ‚ä¢ unit ‚à∑ ùüô
  -- functions
  ‚ä¢ax : {Œì : Ctx} {i : Nat} {A : Type} ‚Üí Lookup Œì i A ‚Üí Œì ‚ä¢ var i ‚à∑ A
  ‚ä¢app : {Œì : Ctx} {p q : Prog} {A B : Type} ‚Üí Œì ‚ä¢ p ‚à∑ A ‚áí B ‚Üí Œì ‚ä¢ q ‚à∑ A ‚Üí Œì ‚ä¢ p ¬∑ q ‚à∑ B
  ‚ä¢abs : {Œì : Ctx} {p : Prog} {A B : Type} ‚Üí Œì // A ‚ä¢ p ‚à∑ B ‚Üí Œì ‚ä¢ abs p ‚à∑ A ‚áí B

data Value where
  unitV : Value unit
  boolV : {b : Bool} ‚Üí Value (bool b)
  natV : {n : Nat} ‚Üí Value (nat n)
  pairV : {p q : Prog} ‚Üí Value p ‚Üí Value q ‚Üí Value ‚ü® p , q ‚ü©
  lambdaV : {p : Prog} ‚Üí Value (abs p)

-- subs-lift-lemma : {Œì : Ctx} {p q : Prog} {A B : Type} {n : Nat}
--                 ‚Üí Œì ‚ä¢ subs (abs p) n q ‚à∑ A ‚áí B
--                 ‚Üí Œì ‚ä¢ abs (subs p (suc n) (lift 0 q)) ‚à∑ A ‚áí B
-- subs-lift-lemma = ?


-- falsified :
-- A ‚ä¢ var 0 ‚à∑ A
-- A // B ‚ä¢ var 0 ‚à∑ B
-- weaken : {Œì : Ctx} {p : Prog} {A C : Type}
--        ‚Üí Œì ‚ä¢ p ‚à∑ A
--        ‚Üí Œì // C ‚ä¢ p ‚à∑ A

lift-lemma : {n : Nat} {Œì : Ctx} {p : Prog} {A C : Type}
           ‚Üí Œì ‚ä¢ p ‚à∑ A
           ‚Üí Œì // C ‚ä¢ lift n p ‚à∑ A
lift-lemma ‚ä¢‚Ñï = ‚ä¢‚Ñï
lift-lemma ‚ä¢ùîπ = ‚ä¢ùîπ
lift-lemma (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) = let ‚ä¢p:N' = lift-lemma ‚ä¢p:N
                                ‚ä¢q:N' = lift-lemma ‚ä¢q:N
                             in ‚ä¢+ ‚ä¢p:N' ‚ä¢q:N'
lift-lemma (‚ä¢< ‚ä¢p:N ‚ä¢q:N) = {! !}
lift-lemma (‚ä¢if ‚ä¢p:B ‚ä¢p:A ‚ä¢q:A) = {! !}
lift-lemma (‚ä¢pair ‚ä¢p:A ‚ä¢q:B) = {! !}
lift-lemma (‚ä¢proj0 ‚ä¢p:AB) = {! !}
lift-lemma (‚ä¢proj1 ‚ä¢p:AB) = {! !}
lift-lemma ‚ä¢ùüô = ‚ä¢ùüô
lift-lemma {n} (‚ä¢ax at-head) with dec< 0 n
... | left  x<n = ‚ä¢ax {! !} -- was...
... | right n‚â§x = ?
lift-lemma (‚ä¢ax (in-tail lookup)) = ?
lift-lemma (‚ä¢app ‚ä¢p:AB ‚ä¢q:A) = {! !}
lift-lemma (‚ä¢abs B‚ä¢p:A) = ‚ä¢abs {! !}

subs-lemma : {Œì : Ctx} {p q : Prog} {C A : Type}
           ‚Üí Œì // C ‚ä¢ p ‚à∑ A
           ‚Üí Œì ‚ä¢ q ‚à∑ C
           ‚Üí Œì ‚ä¢ subs p 0 q ‚à∑ A
subs-lemma ‚ä¢‚Ñï ‚ä¢q:C = ‚ä¢‚Ñï
subs-lemma ‚ä¢ùîπ ‚ä¢q:C = ‚ä¢ùîπ
subs-lemma (‚ä¢+ C‚ä¢p:N C‚ä¢q:N) ‚ä¢q:C = let ‚ä¢p:N = subs-lemma C‚ä¢p:N ‚ä¢q:C 
                                       ‚ä¢q:N = subs-lemma C‚ä¢q:N ‚ä¢q:C
                                    in ‚ä¢+ ‚ä¢p:N ‚ä¢q:N
subs-lemma (‚ä¢< C‚ä¢p:N C‚ä¢q:N) ‚ä¢q:C = let ‚ä¢p:N = subs-lemma C‚ä¢p:N ‚ä¢q:C 
                                       ‚ä¢q:N = subs-lemma C‚ä¢q:N ‚ä¢q:C
                                    in ‚ä¢< ‚ä¢p:N ‚ä¢q:N
subs-lemma (‚ä¢if C‚ä¢c:B C‚ä¢p:A C‚ä¢q:A) ‚ä¢q:C = let ‚ä¢c:B = subs-lemma C‚ä¢c:B ‚ä¢q:C 
                                              ‚ä¢p:A = subs-lemma C‚ä¢p:A ‚ä¢q:C
                                              ‚ä¢q:A = subs-lemma C‚ä¢q:A ‚ä¢q:C
                                           in ‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A
subs-lemma (‚ä¢pair C‚ä¢p:A C‚ä¢q:B) ‚ä¢q:C = let ‚ä¢p:A = subs-lemma C‚ä¢p:A ‚ä¢q:C 
                                          ‚ä¢q:B = subs-lemma C‚ä¢q:B ‚ä¢q:C
                                       in ‚ä¢pair ‚ä¢p:A ‚ä¢q:B
subs-lemma (‚ä¢proj0 C‚ä¢p:AB) ‚ä¢q:C = let ‚ä¢p:AB = subs-lemma C‚ä¢p:AB ‚ä¢q:C in ‚ä¢proj0 ‚ä¢p:AB
subs-lemma (‚ä¢proj1 C‚ä¢p:AB) ‚ä¢q:C = let ‚ä¢p:AB = subs-lemma C‚ä¢p:AB ‚ä¢q:C in ‚ä¢proj1 ‚ä¢p:AB
subs-lemma ‚ä¢ùüô ‚ä¢q:C = ‚ä¢ùüô
subs-lemma (‚ä¢ax at-head) ‚ä¢q:C = ‚ä¢q:C
subs-lemma (‚ä¢ax (in-tail lookup)) ‚ä¢q:C = ‚ä¢ax lookup
subs-lemma (‚ä¢app C‚ä¢p:A‚áíB C‚ä¢q:A) ‚ä¢q:C = let ‚ä¢p:A‚áíB = subs-lemma C‚ä¢p:A‚áíB ‚ä¢q:C 
                                           ‚ä¢q:A   = subs-lemma C‚ä¢q:A   ‚ä¢q:C
                                        in ‚ä¢app ‚ä¢p:A‚áíB ‚ä¢q:A
subs-lemma {Œì} {abs p} {q} {C} {A ‚áí B} (‚ä¢abs C‚ä¢p:A) ‚ä¢q:C = g0
  where
        g1 : Œì // A ‚ä¢ subs p 1 (lift 0 q) ‚à∑ B
        g1 = {! !}
        g0 : Œì ‚ä¢ abs (subs p 1 (lift 0 q)) ‚à∑ A ‚áí B
        g0 = ‚ä¢abs g1


-- A B C : Type
-- C‚ä¢p:A : Œì // C // A ‚ä¢ p ‚à∑ B
-- p q : Prog
-- Œì : Ctx
-- ‚ä¢q:C : Œì ‚ä¢ q ‚à∑ C
-- ----------------------------------
-- Goal: Œì ‚ä¢ subs (abs p) 0 q ‚à∑ A ‚áí B

preservation : {Œì : Ctx} {A : Type} {p q : Prog}
             ‚Üí Œì ‚ä¢ p ‚à∑ A
             ‚Üí p ‚Ü¶ q
             ‚Üí Œì ‚ä¢ q ‚à∑ A
-- add
preservation (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) +-natval = ‚ä¢‚Ñï
preservation (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) (+-left  p‚Ü¶p') = let ‚ä¢p':N = preservation ‚ä¢p:N p‚Ü¶p' in ‚ä¢+ ‚ä¢p':N ‚ä¢q:N
preservation (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) (+-right q‚Ü¶q') = let ‚ä¢q':N = preservation ‚ä¢q:N q‚Ü¶q' in ‚ä¢+ ‚ä¢p:N  ‚ä¢q':N
-- compare
preservation (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-true x) = ‚ä¢ùîπ
preservation (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-false x) = ‚ä¢ùîπ
preservation (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-left  p‚Ü¶p') = let ‚ä¢p':N = preservation ‚ä¢p:N p‚Ü¶p' in ‚ä¢< ‚ä¢p':N ‚ä¢q:N
preservation (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-right q‚Ü¶q') = let ‚ä¢q':N = preservation ‚ä¢q:N q‚Ü¶q' in ‚ä¢< ‚ä¢p:N  ‚ä¢q':N
-- if branching
preservation (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) if-true  = ‚ä¢p:A
preservation (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) if-false = ‚ä¢q:A
preservation (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) (if-cond c‚Ü¶c') = let ‚ä¢c':B = preservation ‚ä¢c:B c‚Ü¶c' in ‚ä¢if ‚ä¢c':B ‚ä¢p:A ‚ä¢q:A
-- pair
preservation (‚ä¢pair ‚ä¢p:A ‚ä¢q:B) (pair-left  p‚Ü¶p') = let ‚ä¢p':A = preservation ‚ä¢p:A p‚Ü¶p' in ‚ä¢pair ‚ä¢p':A ‚ä¢q:B
preservation (‚ä¢pair ‚ä¢p:A ‚ä¢q:B) (pair-right q‚Ü¶q') = let ‚ä¢q':B = preservation ‚ä¢q:B q‚Ü¶q' in ‚ä¢pair ‚ä¢p:A  ‚ä¢q':B
preservation (‚ä¢proj0 ‚ä¢p:AB) (proj0-pair p‚Ü¶p') = let ‚ä¢p':AB = preservation ‚ä¢p:AB p‚Ü¶p' in ‚ä¢proj0 ‚ä¢p':AB
preservation (‚ä¢proj0 (‚ä¢pair ‚ä¢p:A ‚ä¢q:B)) pair-fst = ‚ä¢p:A
preservation (‚ä¢proj1 ‚ä¢p:AB) (proj1-pair p‚Ü¶p') = let ‚ä¢p':AB = preservation ‚ä¢p:AB p‚Ü¶p' in ‚ä¢proj1 ‚ä¢p':AB
preservation (‚ä¢proj1 (‚ä¢pair ‚ä¢p:A ‚ä¢q:B)) pair-snd = ‚ä¢q:B
-- function
preservation (‚ä¢app ‚ä¢p:A‚áíB ‚ä¢q:A) (app-left  p‚Ü¶p') = let ‚ä¢p':A‚áíB = preservation ‚ä¢p:A‚áíB p‚Ü¶p' in ‚ä¢app ‚ä¢p':A‚áíB ‚ä¢q:A
preservation (‚ä¢app ‚ä¢p:A‚áíB ‚ä¢q:A) (app-right q‚Ü¶q') = let ‚ä¢q':A   = preservation ‚ä¢q:A   q‚Ü¶q' in ‚ä¢app ‚ä¢p:A‚áíB  ‚ä¢q':A
preservation (‚ä¢app (‚ä¢abs A‚ä¢p:B) ‚ä¢q:A) app-beta = subs-lemma A‚ä¢p:B ‚ä¢q:A

-- preserve : {A : Type} {p q : Prog} ‚Üí ‚ä¢ p ‚à∑ A ‚Üí p ‚Ü¶ q ‚Üí ‚ä¢ q ‚à∑ A
-- preserve {‚Ñï} ‚ä¢p:N +-natval = ‚ä¢‚Ñï
-- preserve {‚Ñï} (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) (+-left  p‚Ü¶p') = let ‚ä¢p':N = preserve ‚ä¢p:N p‚Ü¶p' in ‚ä¢+ ‚ä¢p':N ‚ä¢q:N
-- preserve {‚Ñï} (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) (+-right q‚Ü¶q') = let ‚ä¢q':N = preserve ‚ä¢q:N q‚Ü¶q' in ‚ä¢+ ‚ä¢p:N  ‚ä¢q':N
-- preserve (‚ä¢< ‚ä¢m:N ‚ä¢n:N) (<-true  m<n) = ‚ä¢ùîπ
-- preserve (‚ä¢< ‚ä¢m:N ‚ä¢n:N) (<-false n‚â§m) = ‚ä¢ùîπ
-- preserve (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-left  p‚Ü¶p') = let ‚ä¢p':N = preserve ‚ä¢p:N p‚Ü¶p' in ‚ä¢< ‚ä¢p':N ‚ä¢q:N
-- preserve (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-right q‚Ü¶q') = let ‚ä¢q':N = preserve ‚ä¢q:N q‚Ü¶q' in ‚ä¢< ‚ä¢p:N  ‚ä¢q':N
-- preserve (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) if-true  = ‚ä¢p:A
-- preserve (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) if-false = ‚ä¢q:A
-- preserve (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) (if-cond c‚Ü¶c') = let ‚ä¢c':B = preserve ‚ä¢c:B c‚Ü¶c' in ‚ä¢if ‚ä¢c':B ‚ä¢p:A ‚ä¢q:A
-- preserve (‚ä¢pair ‚ä¢p:A ‚ä¢q:B) (pair-left  p‚Ü¶p') = let ‚ä¢p':A = preserve ‚ä¢p:A p‚Ü¶p' in ‚ä¢pair ‚ä¢p':A ‚ä¢q:B
-- preserve (‚ä¢pair ‚ä¢p:A ‚ä¢q:B) (pair-right q‚Ü¶q') = let ‚ä¢q':B = preserve ‚ä¢q:B q‚Ü¶q' in ‚ä¢pair ‚ä¢p:A  ‚ä¢q':B
-- preserve {ùüô} {unit} ‚ä¢ùüô ()
--
-- progress : {A : Type} {p : Prog} ‚Üí ‚ä¢ p ‚à∑ A ‚Üí Œ£ Prog (Œª q ‚Üí p ‚Ü¶ q) ‚à® Value p
-- progress ‚ä¢‚Ñï = right natV
-- progress ‚ä¢ùîπ = right boolV
-- progress {‚Ñï} {p +‚Çë q} (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) 
--   with progress ‚ä¢p:N
-- ... | left (p' , p‚Ü¶p') = left (p' +‚Çë q , +-left  p‚Ü¶p')
-- ... | right (natV {m})
--   with progress ‚ä¢q:N
-- ... | left (q' , q‚Ü¶q') = left (p +‚Çë q' , +-right q‚Ü¶q')
-- ... | right (natV {n}) = left (nat (m + n) , +-natval)
-- progress {ùîπ} {p <‚Çë q} (‚ä¢< ‚ä¢p:N ‚ä¢q:N)
--   with progress ‚ä¢p:N
-- ... | left (p' , p‚Ü¶p') = left (p' <‚Çë q , <-left  p‚Ü¶p')
-- ... | right (natV {m})
--   with progress ‚ä¢q:N
-- ... | left (q' , q‚Ü¶q') = left (p <‚Çë q' , <-right q‚Ü¶q')
-- ... | right (natV {n})
--   with dec< m n
-- ... | left  m<n = left (bool true  , <-true  m<n)
-- ... | right n‚â§m = left (bool false , <-false n‚â§m)
-- progress {A} {if c then p else q} (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) 
--   with progress ‚ä¢c:B
-- ... | left (c' , c‚Ü¶c') = left (if c' then p else q , if-cond c‚Ü¶c')
-- ... | right (boolV {true} ) = left (p , if-true )
-- ... | right (boolV {false}) = left (q , if-false)
-- progress {‚ü™ A , B ‚ü´} {‚ü® p , q ‚ü©} (‚ä¢pair ‚ä¢p:A ‚ä¢q:B)
--   with progress ‚ä¢p:A
-- ... | left (p' , p‚Ü¶p') = left (‚ü® p' , q ‚ü© , pair-left   p‚Ü¶p')
-- ... | right vp
--   with progress ‚ä¢q:B
-- ... | left (q' , q‚Ü¶q') = left (‚ü® p , q' ‚ü© , pair-right  q‚Ü¶q')
-- ... | right vq = right (pairV vp vq)
-- progress {ùüô} {unit} ‚ä¢ùüô = right unitV
