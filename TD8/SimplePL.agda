-- Tested on
-- agda 2.6.3
-- agda-stdlib 2.1

open import Data.Unit using (‚ä§ ; tt)
open import Data.Bool using (Bool ; true ; false)
open import Data.Product renaming (_√ó_ to _‚àß_ ; proj‚ÇÅ to fst ; proj‚ÇÇ to snd)
open import Data.Sum renaming (_‚äé_ to _‚à®_ ; inj‚ÇÅ to left ; inj‚ÇÇ to right)
open import Data.Nat renaming (‚Ñï to Nat)
open import Data.Product renaming (proj‚ÇÅ to fst ; proj‚ÇÇ to snd)

dec< : (m n : Nat) ‚Üí m < n ‚à® n ‚â§ m
dec< zero zero = right z‚â§n
dec< zero (suc n) = left z<s
dec< (suc m) zero = right z‚â§n
dec< (suc m) (suc n) with dec< m n
... | left  m<n = left  (s<s m<n)
... | right n‚â§m = right (s‚â§s n‚â§m)


data Prog : Set where
  -- boolean literal
  ùïì : Bool ‚Üí Prog
  -- natural number literal
  ùïü : Nat ‚Üí Prog
  -- sum of two natural numbers
  _+‚Çë_ : Prog ‚Üí Prog ‚Üí Prog
  -- test to see if the a number is less than another number
  _<‚Çë_ : Prog ‚Üí Prog ‚Üí Prog
  -- branching program
  if_then_else_ : Prog ‚Üí Prog ‚Üí Prog ‚Üí Prog
  -- pair of two expression
  ‚ü®_,_‚ü© : Prog ‚Üí Prog ‚Üí Prog
  -- unitary value
  ùï† : Prog

data Value : Prog ‚Üí Set where
  boolV : {b : Bool} ‚Üí Value (ùïì b)
  natV : {n : Nat} ‚Üí Value (ùïü n)
  pairV : {p q : Prog} ‚Üí Value p ‚Üí Value q ‚Üí Value ‚ü® p , q ‚ü©
  unitV : Value ùï†

-- TODO: this reduction relation is non-deterministic, can we show that it is confluent?
infixr 5 _‚áí_
data _‚áí_ : Prog ‚Üí Prog ‚Üí Set where
  -- compute the result of a sum
  +-natval : {m n : Nat} ‚Üí ùïü m +‚Çë ùïü n ‚áí ùïü (m + n)
  -- reduce one operand of a summation
  +-left  : {p p' q : Prog} ‚Üí p ‚áí p' ‚Üí p +‚Çë q ‚áí p' +‚Çë q
  +-right : {p q q' : Prog} ‚Üí q ‚áí q' ‚Üí p +‚Çë q ‚áí p +‚Çë q'
  -- compute the result of a comparison
  <-true  : {m n : Nat} ‚Üí m < n ‚Üí ùïü m <‚Çë ùïü n ‚áí ùïì true
  <-false : {m n : Nat} ‚Üí n ‚â§ m ‚Üí ùïü m <‚Çë ùïü n ‚áí ùïì false
  -- reduce one operand of a comparison 
  <-left  : {p p' q : Prog} ‚Üí p ‚áí p' ‚Üí p <‚Çë q ‚áí p' <‚Çë q
  <-right : {p q q' : Prog} ‚Üí q ‚áí q' ‚Üí p <‚Çë q ‚áí p <‚Çë q'
  -- take one branch of a if-then-else expression
  if-true  : {p q : Prog} ‚Üí if ùïì true  then p else q ‚áí p
  if-false : {p q : Prog} ‚Üí if ùïì false then p else q ‚áí q
  -- reduce the branching condition of a if-then-else expression
  if-cond : {c c' p q : Prog} ‚Üí c ‚áí c' ‚Üí if c then p else q ‚áí if c' then p else q
  -- reduce one component of a pair
  pair-left  : {p p' q : Prog} ‚Üí p ‚áí p' ‚Üí ‚ü® p , q ‚ü© ‚áí ‚ü® p' , q ‚ü©
  pair-right : {p q q' : Prog} ‚Üí q ‚áí q' ‚Üí ‚ü® p , q ‚ü© ‚áí ‚ü® p , q' ‚ü©

data Type : Set where
  ùîπ : Type
  ‚Ñï : Type
  ‚ü™_,_‚ü´ : Type ‚Üí Type ‚Üí Type
  ùüô : Type

data ‚ä¢_‚à∑_ : Prog ‚Üí Type ‚Üí Set where
  -- type of atomic values
  ‚ä¢‚Ñï : {n : Nat}  ‚Üí ‚ä¢ ùïü n ‚à∑ ‚Ñï
  ‚ä¢ùîπ : {b : Bool} ‚Üí ‚ä¢ ùïì b ‚à∑ ùîπ
  -- type of compositional expressions : build from types of sub-expressions
  ‚ä¢+ : {p q : Prog} ‚Üí ‚ä¢ p ‚à∑ ‚Ñï ‚Üí ‚ä¢ q ‚à∑ ‚Ñï ‚Üí ‚ä¢ p +‚Çë q ‚à∑ ‚Ñï
  ‚ä¢< : {p q : Prog} ‚Üí ‚ä¢ p ‚à∑ ‚Ñï ‚Üí ‚ä¢ q ‚à∑ ‚Ñï ‚Üí ‚ä¢ p <‚Çë q ‚à∑ ùîπ
  -- branching condition must be boolean and the two branches have the identical type
  ‚ä¢if : {c p q : Prog} {A : Type} ‚Üí ‚ä¢ c ‚à∑ ùîπ ‚Üí ‚ä¢ p ‚à∑ A ‚Üí ‚ä¢ q ‚à∑ A ‚Üí ‚ä¢ if c then p else q ‚à∑ A
  -- pair type
  |-pair : {p q : Prog} {A B : Type} ‚Üí ‚ä¢ p ‚à∑ A ‚Üí ‚ä¢ q ‚à∑ B ‚Üí ‚ä¢ ‚ü® p , q ‚ü© ‚à∑ ‚ü™ A , B ‚ü´
  -- unit type
  |-ùüô : ‚ä¢ ùï† ‚à∑ ùüô

preserve : {A : Type} {p q : Prog} ‚Üí ‚ä¢ p ‚à∑ A ‚Üí p ‚áí q ‚Üí ‚ä¢ q ‚à∑ A
preserve {‚Ñï} ‚ä¢p:N +-natval = ‚ä¢‚Ñï
preserve {‚Ñï} (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) (+-left  p‚áíp') = let ‚ä¢p':N = preserve ‚ä¢p:N p‚áíp' in ‚ä¢+ ‚ä¢p':N ‚ä¢q:N
preserve {‚Ñï} (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) (+-right q‚áíq') = let ‚ä¢q':N = preserve ‚ä¢q:N q‚áíq' in ‚ä¢+ ‚ä¢p:N  ‚ä¢q':N
preserve (‚ä¢< ‚ä¢m:N ‚ä¢n:N) (<-true  m<n) = ‚ä¢ùîπ
preserve (‚ä¢< ‚ä¢m:N ‚ä¢n:N) (<-false n‚â§m) = ‚ä¢ùîπ
preserve (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-left  p‚áíp') = let ‚ä¢p':N = preserve ‚ä¢p:N p‚áíp' in ‚ä¢< ‚ä¢p':N ‚ä¢q:N
preserve (‚ä¢< ‚ä¢p:N ‚ä¢q:N) (<-right q‚áíq') = let ‚ä¢q':N = preserve ‚ä¢q:N q‚áíq' in ‚ä¢< ‚ä¢p:N  ‚ä¢q':N
preserve (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) if-true  = ‚ä¢p:A
preserve (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) if-false = ‚ä¢q:A
preserve (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) (if-cond c‚áíc') = let ‚ä¢c':B = preserve ‚ä¢c:B c‚áíc' in ‚ä¢if ‚ä¢c':B ‚ä¢p:A ‚ä¢q:A
preserve (|-pair ‚ä¢p:A ‚ä¢q:B) (pair-left  p‚áíp') = let ‚ä¢p':A = preserve ‚ä¢p:A p‚áíp' in |-pair ‚ä¢p':A ‚ä¢q:B
preserve (|-pair ‚ä¢p:A ‚ä¢q:B) (pair-right q‚áíq') = let ‚ä¢q':B = preserve ‚ä¢q:B q‚áíq' in |-pair ‚ä¢p:A  ‚ä¢q':B
preserve {ùüô} {ùï†} ‚ä¢ùüô ()

progress : {A : Type} {p : Prog} ‚Üí ‚ä¢ p ‚à∑ A ‚Üí Œ£ Prog (Œª q ‚Üí p ‚áí q) ‚à® Value p
progress ‚ä¢‚Ñï = right natV
progress ‚ä¢ùîπ = right boolV
progress {‚Ñï} {p +‚Çë q} (‚ä¢+ ‚ä¢p:N ‚ä¢q:N) 
  with progress ‚ä¢p:N
... | left (p' , p‚áíp') = left (p' +‚Çë q , +-left  p‚áíp')
... | right (natV {m})
  with progress ‚ä¢q:N
... | left (q' , q‚áíq') = left (p +‚Çë q' , +-right q‚áíq')
... | right (natV {n}) = left (ùïü (m + n) , +-natval)
progress {ùîπ} {p <‚Çë q} (‚ä¢< ‚ä¢p:N ‚ä¢q:N)
  with progress ‚ä¢p:N
... | left (p' , p‚áíp') = left (p' <‚Çë q , <-left  p‚áíp')
... | right (natV {m})
  with progress ‚ä¢q:N
... | left (q' , q‚áíq') = left (p <‚Çë q' , <-right q‚áíq')
... | right (natV {n})
  with dec< m n
... | left  m<n = left (ùïì true  , <-true  m<n)
... | right n‚â§m = left (ùïì false , <-false n‚â§m)
progress {A} {if c then p else q} (‚ä¢if ‚ä¢c:B ‚ä¢p:A ‚ä¢q:A) 
  with progress ‚ä¢c:B
... | left (c' , c‚áíc') = left (if c' then p else q , if-cond c‚áíc')
... | right (boolV {true} ) = left (p , if-true )
... | right (boolV {false}) = left (q , if-false)
progress {‚ü™ A , B ‚ü´} {‚ü® p , q ‚ü©} (|-pair ‚ä¢p:A ‚ä¢q:B)
  with progress ‚ä¢p:A
... | left (p' , p‚áíp') = left (‚ü® p' , q ‚ü© , pair-left   p‚áíp')
... | right vp
  with progress ‚ä¢q:B
... | left (q' , q‚áíq') = left (‚ü® p , q' ‚ü© , pair-right  q‚áíq')
... | right vq = right (pairV vp vq)
progress {ùüô} {ùï†} |-ùüô = right unitV
