define fst = fun (m : Nat) -> fun (n : Nat) -> m
define pred = fun (k : Nat) -> Ind (fun (n : Nat) -> Nat) Z fst k
eval pred Z
eval pred (S (S (S Z)))


define add = fun (m : Nat) -> fun (n : Nat) -> Ind (fun (n : Nat) -> Nat) n (fun (m : Nat) -> fun (s : Nat) -> S s) m
eval add (S (S (S Z))) (S (S Z))

define mul = fun (m : Nat) -> fun (n : Nat) -> Ind (fun (n : Nat) -> Nat) Z (fun (m : Nat) -> fun (s : Nat) -> add n s) m
define mul = fun (m : Nat) -> fun (n : Nat) -> Ind (fun (n : Nat) -> Nat) Z (fun (m : Nat) -> fun (m : Nat) -> add n m) m
eval mul Z (S (S (S Z)))
eval mul (S (S (S Z))) Z
eval mul (S (S (S Z))) (S (S Z))


(n : Nat) -> (IH : Nat) -> Nat
(m : Nat) -> (m : Nat) -> Nat


define SeqPred = fun (x : Nat) -> fun (y : Nat) -> fun (eq : x = y) -> S x = S y
define sxEQsx = fun (x : Nat) -> Refl (S x)
define Seq = fun (x : Nat) -> fun (y : Nat) -> fun (eq : x = y) -> J SeqPred sxEQsx x y eq
check Seq = Pi (x : Nat) -> Pi (y : Nat) -> Pi (e : x = y) -> S x = S y

define zadd = fun (n : Nat) -> Refl n
check zadd = Pi (n : Nat) -> add Z n = n

define addzPred = fun (n : Nat) -> add n Z = n
define addzIndStep = fun (n : Nat) -> fun (eq : add n Z = n) -> Seq (add n Z) n eq
define addz = fun (n : Nat) -> Ind addzPred (Refl Z) addzIndStep n
check addz = Pi (n : Nat) -> add n Z = n

# add-assoc, add-comm
# mul-assoc, mul-comm

exit
