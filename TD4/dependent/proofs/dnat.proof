define fst = fun (m : Nat) -> fun (n : Nat) -> m ;;
define suc = fun (k : Nat) -> S k ;;

define pred = fun (k : Nat) -> Ind (fun (n : Nat) -> Nat) Z fst k ;;
eval pred Z ;;
eval pred (S (S (S Z))) ;;
eval pred (suc (suc (suc Z))) ;;

check (fun (n : Nat) -> S (pred n)) = Nat => Nat;;


define add = fun (m : Nat) -> fun (n : Nat) ->
             Ind
               (fun (n : Nat) -> Nat)
               n
               (fun (m : Nat) -> fun (s : Nat) -> S s)
               m   ;;
eval add (S (S (S Z))) (S (S Z)) ;;

define mul = fun (m : Nat) -> fun (n : Nat) ->
             Ind
               (fun (n : Nat) -> Nat)
               Z
               (fun (m : Nat) -> fun (s : Nat) -> add n s)
               m
             ;;
eval mul Z (S (S (S Z))) ;;
eval mul (S (S (S Z))) Z ;;
eval mul (S (S (S Z))) (S (S Z)) ;;


define SeqPred = fun (x : Nat) -> fun (y : Nat) -> fun (eq : x = y) -> S x = S y ;;
define sxEQsx = fun (x : Nat) -> Refl (S x) ;;
define Seq = fun (x : Nat) -> fun (y : Nat) -> fun (eq : x = y) -> J SeqPred sxEQsx x y eq ;;
check Seq = Pi (x : Nat) Pi (y : Nat) Pi (e : x = y) S x = S y ;;

define congType = Pi (T : Type) Pi (U : Type) Pi (f : T => U)
                  Pi (x : T) Pi (y : T) x = y => f x = f y;;
define cong = fun (T : Type) -> fun (U : Type) -> fun (f : T => U)
           -> fun (x : T) -> fun (y : T) -> fun (eq : x = y)
           -> J
                 (fun (x : T) -> fun (y : T) -> fun (eq : x = y) -> f x = f y)
                 (fun (x : T) -> Refl (f x))
                 x
                 y
                 eq;;
check cong = congType;;
define congSuc = cong Nat Nat suc;;
check congSuc = Pi (m : Nat) Pi (n : Nat) Pi (e : m = n) S m = S n;;

define transType = Pi (T : Type)
                     Pi (x : T) Pi (y : T) Pi (z : T)
                       Pi (xy : x = y) Pi (yz : y = z)
                         x = z;;
define trans = fun (T : Type) ->
                 fun (x : T) -> fun (y : T) -> fun (z : T) ->
                   fun (xy : x = y) -> fun (yz : y = z) ->
                     (J
                       (fun (s : T) -> fun (t : T) -> fun (e : s = t) -> t = z => s = z)
                       (fun (t : T) -> fun (e : t = z) -> e)
                       x y xy) yz;;
check trans = transType;;

define symType = Pi (T : Type)
                   Pi (x : T) Pi (y : T)
                     Pi (e : x = y)
                       y = x;;
define sym = fun (T : Type) ->
               fun (x : T) -> fun (y : T) ->
                 fun (e : x = y) ->
                   J
                     (fun (x : T) -> fun (y : T) -> fun (e : x = y) -> y = x)
                     (fun (x : T) -> Refl x)
                     x y e;;
check sym = symType;;


# 0 is left/right netural element of addition
define zadd = fun (n : Nat) -> Refl n;;
check zadd =  Pi (n : Nat) add Z n = n;;
define addz = fun (n : Nat) ->
                Ind
                  (fun (n : Nat) -> add n Z = n)
                  (Refl Z)
                  (fun (n : Nat) -> fun (ih : add n Z = n) ->
                    congSuc (add n Z) n ih)
                  n;;
check addz =  Pi (n : Nat) add n Z = n ;;

# add-assoc, add-comm
define addAssocType = Pi (x : Nat) Pi (y : Nat) Pi (z : Nat)
                      add (add x y) z = add x (add y z);;
define addAssocPred = fun (x : Nat) ->
                      Pi (y : Nat) Pi (z : Nat) add (add x y) z = add x (add y z);;
check addAssocPred = Nat => Type;;

define addAssocBase = (fun (y : Nat) -> fun (z : Nat) -> Refl (add y z)) ;;
check addAssocBase = Pi (y : Nat) Pi (z : Nat) add (add Z y) z = add Z (add y z);;
check addAssocBase = addAssocPred Z ;;

define addAssocStep = fun (x : Nat) -> 
                      fun (IH : addAssocPred x) ->
                      fun (y : Nat) -> fun (z : Nat) ->
                        congSuc
                             (add (add x y) z)
                             (add x (add y z))
                             # get the proof of (x + y) + z = x + (y + z)
                             (IH y z) ;;
check addAssocStep = Pi (x : Nat) Pi (IH : addAssocPred x) addAssocPred (S x);;


define addAssoc = fun (x : Nat) -> Ind addAssocPred addAssocBase addAssocStep x ;;
type addAssoc ;;
check addAssoc = addAssocType ;;

define addSucThm = fun (m : Nat) ->
                     fun (n : Nat) ->
                       Ind
                         (fun (t : Nat) -> add t (suc n) = suc (add t n))
                         (Refl (suc n))
                         (fun (t : Nat) -> fun (IH : add t (suc n) = suc (add t n)) ->
                            congSuc (add t (suc n)) (suc (add t n)) IH
                         )
                         m;;
check addSucThm = Pi (m : Nat) Pi (n : Nat) add m (suc n) = suc (add m n);;

define addCommTerm = fun (x : Nat) -> fun (y : Nat) -> add x y = add y x;;
check addCommTerm = Nat => Nat => Type;;
define addCommType = Pi (x : Nat) Pi (y : Nat) addCommTerm x y;;
check addCommType = Type;;



define addComm = fun (x : Nat) -> fun (y : Nat) ->
                   Ind
                     (fun (y : Nat) -> addCommTerm x y)
                     (addz x)
                     (fun (y : Nat) -> fun (IH : addCommTerm x y) ->
                       trans Nat
                        # x y z
                        (add x (suc y))
                        (suc (add x y))
                        (suc (add y x))
                        # x=y y=z
                        (addSucThm x y)
                        (congSuc (add x y) (add y x) IH)
                     )
                     y ;;
check addComm = addCommType;;

# mul-assoc, mul-comm
define N = Nat;;
define distribute = fun (m : N) -> fun (n : N) -> fun (p : N) ->
                      Ind
                        (fun (m : N) -> mul (add m n) p = add (mul m p) (mul n p))
                        (Refl (mul n p))
                        (fun (m : N) -> fun (IH : mul (add m n) p = add (mul m p) (mul n p)) ->
                           trans Nat
                             # x y z
                             (mul (add (S m) n) p)
                             (add p (add (mul m p) (mul n p)))
                             (add (mul (S m) p) (mul n p))
                             # eqaulities
                             (cong Nat Nat
                               (fun (x : Nat) -> add p x)
                               (mul (add m n) p)
                               (add (mul m p) (mul n p))
                               IH)
                             (sym Nat
                               # value x
                               (add (mul (S m) p) (mul n p))
                               # value y
                               (add p (add (mul m p) (mul n p)))
                               # equality
                               (addAssoc p (mul m p) (mul n p)))
                        )
                        m ;;

check distribute = Pi (m : N) Pi (n : N) Pi (p : N)
                   mul (add m n) p = add (mul m p) (mul n p);;

define mulAssoc = fun (m : N) -> fun (n : N) -> fun (p : N) ->
                    Ind
                      (fun (m : N) -> mul (mul m n) p = mul m (mul n p))
                      (Refl Z)
                      (fun (m : N) -> fun (IH : mul (mul m n) p = mul m (mul n p)) ->
                         trans N
                           # x y z
                           (mul (mul (S m) n) p)
                           # (S m * n) * p
                           # (n + m * n) * p
                           # (n * p) + (m * n * p)
                           (add (mul n p) (mul (mul m n) p))
                           (mul (S m) (mul n p))
                           # x=y y=z
                           (distribute n (mul m n) p)
                           (cong N N (fun (x : N) -> add (mul n p) x)
                             (mul (mul m n) p)
                             (mul m (mul n p))
                             IH)
                      )
                      m;;
check mulAssoc = Pi (m : N) Pi (n : N) Pi (p : N)
                 mul (mul m n) p = mul m (mul n p);;



define mulZ = fun (n : N) ->
                Ind
                  (fun (n : N) -> Z = mul n Z)
                  (Refl Z)
                  (fun (n : N) -> fun (IH : Z = mul n Z) ->
                     cong N N (fun (x : N) -> add Z x)
                       Z (mul n Z)
                       IH)
                  n;;
check mulZ = Pi (n : N) Z = mul n Z;;

define I = S Z;;

define mulIr = fun (n : N) ->
                 Ind (fun (n : N) -> n = mul n I)
                   (Refl Z)
                   (fun (n : N) -> fun (IH : n = mul n I) ->
                      congSuc n (mul n I) IH
                   )
                   n;;
check mulIr = Pi (m : N) m = mul m I;;

define mulS = fun (m : N) -> fun (p : N) ->
                Ind (fun (m : N) -> mul m (S p) = add (mul m I) (mul m p))
                  (Refl Z)
                  (fun (m : N) -> fun (IH : mul m (S p) = add (mul m I) (mul m p)) ->
                    congSuc
                      (add p (mul m (S p)))
                      (add (mul m I) (add p (mul m p)))
                      # equality
                      (trans N
                        (add p (mul m (S p)))
                        (add p (add (mul m I) (mul m p)))
                        (add (mul m I) (add p (mul m p)))
                        # cong (p +_) (lemma m p)
                        (cong N N (fun (x : N) -> add p x)
                          (mul m (S p))
                          (add (mul m I) (mul m p))
                          IH)
                        (trans N
                          (add p (add (mul m I) (mul m p)))
                          (add (add p (mul m I)) (mul m p))
                          (add (mul m I) (add p (mul m p)))
                          # sym (+-assoc p (m * 1) (m * p))
                          (sym N
                            (add (add p (mul m I)) (mul m p))
                            (add p (add (mul m I) (mul m p)))
                            (addAssoc p (mul m I) (mul m p)))
                          (trans N
                            (add (add p (mul m I)) (mul m p))
                            (add (add (mul m I) p) (mul m p))
                            (add (mul m I) (add p (mul m p)))
                            # cong (_+ m * p) (+-comm p (m * 1))
                            (cong N N (fun (x : N) -> add x (mul m p))
                              (add p (mul m I))
                              (add (mul m I) p)
                              (addComm p (mul m I)))
                            # +-assoc (m * 1) p (m * p)
                            (addAssoc (mul m I) p (mul m p)))))
                  )
                  m;;
check mulS = Pi (m : N) Pi (p : N) mul m (S p) = add (mul m I) (mul m p);;
define symMulS = fun (m : N) -> fun (p : N) ->
                    sym N
                      (mul m (S p)) (add (mul m I) (mul m p))
                      (mulS m p);;
check symMulS = Pi (m : N) Pi (p : N) add (mul m I) (mul m p) = mul m (S p);;

define mulComm = fun (m : N) -> fun (n : N) ->
                   Ind
                     (fun (m : N) -> mul m n = mul n m)
                     (mulZ n)
                     (fun (m : N) -> fun (IH : mul m n = mul n m) ->
                        # cong (n +_) (*-comm m n)
                        trans N
                          (add n (mul m n))
                          (add n (mul n m))
                          (mul n (S m))
                          # equalities
                          (cong N N (fun (x : N) -> add n x)
                             (mul m n) (mul n m) IH)
                          # cong (_+ n * m) (*-id n)
                          (trans N
                             (add n (mul n m))
                             (add (mul n I) (mul n m))
                             (mul n (S m))
                             # equalities
                             (cong N N (fun (x : N) -> add x (mul n m))
                                n (mul n I) (mulIr n))
                             (symMulS n m)
                          )
                     )
                     m;;
check mulComm = Pi (m : N) Pi (n : N)
                   mul m n = mul n m;;
exit;;
